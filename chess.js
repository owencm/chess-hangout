// Generated by CoffeeScript 1.3.3
(function() {
  var Bishop, King, Knight, Messenger, Model, Pawn, Piece, Pos, Queen, Rook, View, init,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(function() {
    return init();
  });

  init = function() {
    var messenger, model, view;
    messenger = new Messenger();
    model = new Model(messenger);
    return view = new View(model);
  };

  Messenger = (function() {

    function Messenger() {}

    Messenger.prototype.movePiece = function(from, to) {
      var moveObj;
      moveObj = {
        from: from,
        to: to
      };
      return console.log(JSON.stringify(moveObj));
    };

    return Messenger;

  })();

  Pos = (function() {

    function Pos(row, col) {
      this.row = row;
      this.col = col;
    }

    Pos.prototype.sameAs = function(pos) {
      return pos.getRow() === this.row && pos.getCol() === this.col;
    };

    Pos.prototype.getRow = function() {
      return this.row;
    };

    Pos.prototype.getCol = function() {
      return this.col;
    };

    Pos.prototype.print = function() {
      return "col: " + this.col + ", row: " + this.row;
    };

    return Pos;

  })();

  Piece = (function() {

    function Piece(type, player, pos, model) {
      var removed;
      this.type = type;
      this.player = player;
      this.pos = pos;
      this.model = model;
      if (!(this.player === "white" || this.player === "black")) {
        console.log("invalid player");
      }
      removed = false;
      this.hasMoved = false;
    }

    Piece.prototype.getPos = function() {
      return this.pos;
    };

    Piece.prototype.setPos = function(pos) {
      this.pos = pos;
    };

    Piece.prototype.setHasMoved = function(hasMoved) {
      this.hasMoved = hasMoved;
    };

    Piece.prototype.getHasMoved = function() {
      return this.hasMoved;
    };

    Piece.prototype.getPlayer = function() {
      return this.player;
    };

    Piece.prototype.getType = function() {
      return this.type;
    };

    Piece.prototype.getId = function() {
      return this.id;
    };

    Piece.prototype.remove = function() {
      this.removed = true;
      this.finalPos = this.pos;
      return this.pos = new Pos(-1, -1);
    };

    Piece.prototype.restore = function() {
      if (!this.removed) {
        console.log("Attempting to restore a piece that was never removed!");
      }
      this.removed = false;
      return this.pos = this.finalPos;
    };

    Piece.prototype.getBasicMoves = function() {
      return [];
    };

    Piece.prototype.getValidMoves = function() {
      var m, moves, newMoves, _i, _len;
      moves = this.getBasicMoves();
      newMoves = [];
      for (_i = 0, _len = moves.length; _i < _len; _i++) {
        m = moves[_i];
        if (m != null) {
          if (!this.model.isCheckedAfterMove(this.getPlayer(), this, m)) {
            newMoves.push(m);
          }
        }
      }
      return newMoves;
    };

    Piece.prototype.validMove = function(pos) {
      var move, _i, _len, _ref;
      _ref = this.getValidMoves();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        move = _ref[_i];
        if (move.sameAs(pos)) {
          return true;
        }
      }
      return false;
    };

    return Piece;

  })();

  Pawn = (function(_super) {

    __extends(Pawn, _super);

    function Pawn(player, pos, model) {
      Pawn.__super__.constructor.call(this, "pawn", player, pos, model);
    }

    Pawn.prototype.getBasicMoves = function() {
      var dx, dy, moves, newPos, pieceAtPos, _i, _len, _ref;
      moves = [];
      if (this.player === "white") {
        dy = 1;
      } else if (this.player === "black") {
        dy = -1;
      }
      newPos = new Pos(this.pos.getRow() + dy, this.pos.getCol());
      if (this.model.squareEmpty(newPos) && this.model.onBoard(newPos)) {
        moves.push(newPos);
      }
      if (!this.hasMoved) {
        newPos = new Pos(this.pos.getRow() + 2 * dy, this.pos.getCol());
        if (this.model.squareEmpty(newPos) && this.model.onBoard(newPos)) {
          moves.push(newPos);
        }
      }
      _ref = [-1, 1];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dx = _ref[_i];
        newPos = new Pos(this.pos.getRow() + dy, this.pos.getCol() + dx);
        pieceAtPos = this.model.getPieceAt(newPos);
        if (pieceAtPos != null) {
          if (pieceAtPos.player !== this.getPlayer()) {
            moves.push(newPos);
          }
        }
      }
      return moves;
    };

    return Pawn;

  })(Piece);

  Rook = (function(_super) {

    __extends(Rook, _super);

    function Rook(player, pos, model) {
      Rook.__super__.constructor.call(this, "rook", player, pos, model);
    }

    Rook.prototype.getBasicMoves = function() {
      var castlingRookPos, dx, dxdy, dy, king, kingsPos, moves, newPos, pos, x, y, _i, _len, _ref;
      moves = [];
      _ref = [
        {
          dx: 0,
          dy: 1
        }, {
          dx: 0,
          dy: -1
        }, {
          dx: 1,
          dy: 0
        }, {
          dx: -1,
          dy: 0
        }
      ];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dxdy = _ref[_i];
        dx = dxdy.dx;
        dy = dxdy.dy;
        x = this.pos.getCol();
        y = this.pos.getRow();
        newPos = new Pos(y + dy, x + dx);
        while (this.model.onBoard(newPos) && this.model.squareEmpty(newPos)) {
          moves.push(newPos);
          x = x + dx;
          y = y + dy;
          newPos = new Pos(y, x);
        }
        if (this.model.onBoard(newPos) && !this.model.squareEmpty(newPos) && this.model.getPieceAt(newPos).player !== this.getPlayer()) {
          moves.push(newPos);
        }
      }
      if (this.getPlayer() === "white") {
        castlingRookPos = new Pos(0, 7);
      } else {
        castlingRookPos = new Pos(7, 0);
      }
      if (castlingRookPos.sameAs(this.getPos())) {
        if (this.hasMoved === false) {
          if (this.getPlayer() === "white") {
            dx = -1;
          } else {
            dx = 1;
          }
          pos = this.getPos();
          if (this.model.squareEmpty(new Pos(pos.getRow(), pos.getCol() + dx)) && this.model.squareEmpty(new Pos(pos.getRow(), pos.getCol() + 2 * dx))) {
            kingsPos = new Pos(pos.getRow(), pos.getCol() + 3 * dx);
            king = this.model.getPieceAt(kingsPos);
            if (king != null) {
              if (king.getHasMoved() === false && king.getType() === "king") {
                moves.push(kingsPos);
              }
            }
          }
        }
      }
      return moves;
    };

    return Rook;

  })(Piece);

  Knight = (function(_super) {

    __extends(Knight, _super);

    function Knight(player, pos, model) {
      Knight.__super__.constructor.call(this, "knight", player, pos, model);
    }

    Knight.prototype.getBasicMoves = function() {
      var dx, dxdy, dy, moves, newPos, x, y, _i, _len, _ref;
      moves = [];
      _ref = [
        {
          dx: 2,
          dy: 1
        }, {
          dx: 2,
          dy: -1
        }, {
          dx: -2,
          dy: 1
        }, {
          dx: -2,
          dy: -1
        }, {
          dy: 2,
          dx: 1
        }, {
          dy: 2,
          dx: -1
        }, {
          dy: -2,
          dx: 1
        }, {
          dy: -2,
          dx: -1
        }
      ];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dxdy = _ref[_i];
        dx = dxdy.dx;
        dy = dxdy.dy;
        x = this.pos.getCol();
        y = this.pos.getRow();
        newPos = new Pos(y + dy, x + dx);
        if (this.model.onBoard(newPos)) {
          if (this.model.squareEmpty(newPos)) {
            moves.push(newPos);
          } else if (this.model.getPieceAt(newPos).player !== this.getPlayer()) {
            moves.push(newPos);
          }
        }
      }
      return moves;
    };

    return Knight;

  })(Piece);

  Bishop = (function(_super) {

    __extends(Bishop, _super);

    function Bishop(player, pos, model) {
      Bishop.__super__.constructor.call(this, "bishop", player, pos, model);
    }

    Bishop.prototype.getBasicMoves = function() {
      var dx, dxdy, dy, moves, newPos, x, y, _i, _len, _ref;
      moves = [];
      _ref = [
        {
          dx: 1,
          dy: 1
        }, {
          dx: -1,
          dy: -1
        }, {
          dx: 1,
          dy: -1
        }, {
          dx: -1,
          dy: 1
        }
      ];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dxdy = _ref[_i];
        dx = dxdy.dx;
        dy = dxdy.dy;
        x = this.pos.getCol();
        y = this.pos.getRow();
        newPos = new Pos(y + dy, x + dx);
        while (this.model.onBoard(newPos) && this.model.squareEmpty(newPos)) {
          moves.push(newPos);
          x = x + dx;
          y = y + dy;
          newPos = new Pos(y, x);
        }
        if (this.model.onBoard(newPos) && !this.model.squareEmpty(newPos) && this.model.getPieceAt(newPos).player !== this.getPlayer()) {
          moves.push(newPos);
        }
      }
      return moves;
    };

    return Bishop;

  })(Piece);

  Queen = (function(_super) {

    __extends(Queen, _super);

    function Queen(player, pos, model) {
      Queen.__super__.constructor.call(this, "queen", player, pos, model);
    }

    Queen.prototype.getBasicMoves = function() {
      var dx, dxdy, dy, moves, newPos, x, y, _i, _len, _ref;
      moves = [];
      _ref = [
        {
          dx: 1,
          dy: 1
        }, {
          dx: -1,
          dy: -1
        }, {
          dx: 1,
          dy: -1
        }, {
          dx: -1,
          dy: 1
        }, {
          dx: 0,
          dy: 1
        }, {
          dx: 0,
          dy: -1
        }, {
          dx: 1,
          dy: 0
        }, {
          dx: -1,
          dy: 0
        }
      ];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dxdy = _ref[_i];
        dx = dxdy.dx;
        dy = dxdy.dy;
        x = this.pos.getCol();
        y = this.pos.getRow();
        newPos = new Pos(y + dy, x + dx);
        while (this.model.onBoard(newPos) && this.model.squareEmpty(newPos)) {
          moves.push(newPos);
          x = x + dx;
          y = y + dy;
          newPos = new Pos(y, x);
        }
        if (this.model.onBoard(newPos) && !this.model.squareEmpty(newPos) && this.model.getPieceAt(newPos).player !== this.getPlayer()) {
          moves.push(newPos);
        }
      }
      return moves;
    };

    return Queen;

  })(Piece);

  King = (function(_super) {

    __extends(King, _super);

    function King(player, pos, model) {
      King.__super__.constructor.call(this, "king", player, pos, model);
    }

    King.prototype.getBasicMoves = function() {
      var dx, dxdy, dy, moves, newPos, piece, pos, x, y, _i, _len, _ref;
      moves = [];
      _ref = [
        {
          dx: 1,
          dy: 1
        }, {
          dx: -1,
          dy: -1
        }, {
          dx: 1,
          dy: -1
        }, {
          dx: -1,
          dy: 1
        }, {
          dx: 0,
          dy: 1
        }, {
          dx: 0,
          dy: -1
        }, {
          dx: 1,
          dy: 0
        }, {
          dx: -1,
          dy: 0
        }
      ];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dxdy = _ref[_i];
        dx = dxdy.dx;
        dy = dxdy.dy;
        x = this.pos.getCol();
        y = this.pos.getRow();
        newPos = new Pos(y + dy, x + dx);
        if (this.model.onBoard(newPos) && (this.model.squareEmpty(newPos) || (!this.model.squareEmpty(newPos) && this.model.getPieceAt(newPos).player !== this.getPlayer()))) {
          moves.push(newPos);
        }
      }
      if (this.hasMoved === false) {
        if (this.getPlayer() === "white") {
          dx = 1;
        } else {
          dx = -1;
        }
        pos = this.getPos();
        if (this.model.squareEmpty(new Pos(pos.getRow(), pos.getCol() + dx)) && this.model.squareEmpty(new Pos(pos.getRow(), pos.getCol() + 2 * dx))) {
          piece = this.model.getPieceAt(new Pos(pos.getRow(), pos.getCol() + 3 * dx));
          if (piece != null) {
            if (piece.getHasMoved() === false && piece.getType() === "rook") {
              moves.push(new Pos(pos.getRow(), pos.getCol() + 3 * dx));
            }
          }
        }
      }
      return moves;
    };

    return King;

  })(Piece);

  Model = (function() {

    function Model(messenger) {
      this.messenger = messenger;
      this.modelChangedListeners = [];
      this.resetBoard();
    }

    Model.prototype.resetBoard = function() {
      var i, _i, _j;
      this.selected = null;
      this.pieces = [];
      this.currentPlayer = "white";
      for (i = _i = 0; _i <= 7; i = ++_i) {
        this.pieces.push(new Pawn("white", new Pos(1, i), this));
      }
      for (i = _j = 0; _j <= 7; i = ++_j) {
        this.pieces.push(new Pawn("black", new Pos(6, i), this));
      }
      this.pieces.push(new Rook("white", new Pos(0, 0), this));
      this.pieces.push(new Rook("white", new Pos(0, 7), this));
      this.pieces.push(new Rook("black", new Pos(7, 0), this));
      this.pieces.push(new Rook("black", new Pos(7, 7), this));
      this.pieces.push(new Knight("white", new Pos(0, 1), this));
      this.pieces.push(new Knight("white", new Pos(0, 6), this));
      this.pieces.push(new Knight("black", new Pos(7, 1), this));
      this.pieces.push(new Knight("black", new Pos(7, 6), this));
      this.pieces.push(new Bishop("white", new Pos(0, 2), this));
      this.pieces.push(new Bishop("white", new Pos(0, 5), this));
      this.pieces.push(new Bishop("black", new Pos(7, 2), this));
      this.pieces.push(new Bishop("black", new Pos(7, 5), this));
      this.pieces.push(new Queen("white", new Pos(0, 3), this));
      this.pieces.push(new Queen("black", new Pos(7, 4), this));
      this.pieces.push(new King("white", new Pos(0, 4), this));
      this.pieces.push(new King("black", new Pos(7, 3), this));
      return this.modelChanged();
    };

    Model.prototype.getKing = function(player) {
      var piece, _i, _len, _ref;
      _ref = this.pieces;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        piece = _ref[_i];
        if (piece.getPlayer() === player && piece.getType() === "king") {
          return piece;
        }
      }
    };

    Model.prototype.isChecked = function(player) {
      var kingPos, move, piece, _i, _j, _len, _len1, _ref, _ref1;
      kingPos = this.getKing(player).getPos();
      _ref = this.pieces;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        piece = _ref[_i];
        if (piece.getPlayer() !== player) {
          _ref1 = piece.getBasicMoves();
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            move = _ref1[_j];
            if (kingPos.sameAs(move)) {
              return true;
            }
          }
        }
      }
      return false;
    };

    Model.prototype.isCheckedAfterMove = function(player, piece, pos) {
      var check, moveResult, pieceUndo, pieceUndoes, removedPiece, _i, _len;
      check = false;
      moveResult = this.movePieceTemporarily(piece, pos);
      pieceUndoes = moveResult.pieceUndoes;
      removedPiece = moveResult.removedPiece;
      if (this.isChecked(player)) {
        check = true;
      }
      for (_i = 0, _len = pieceUndoes.length; _i < _len; _i++) {
        pieceUndo = pieceUndoes[_i];
        this.movePieceTemporarily(pieceUndo.piece, pieceUndo.oldPos);
      }
      if (removedPiece != null) {
        removedPiece.restore();
      }
      return check;
    };

    Model.prototype.resetGame = function() {
      resetBoard();
      return this.gameWon = null;
    };

    Model.prototype.getGameWon = function() {
      return this.gameWon;
    };

    Model.prototype.getCurrentPlayer = function() {
      return this.currentPlayer;
    };

    Model.prototype.getPieceAt = function(pos) {
      var piece, _i, _len, _ref;
      _ref = this.pieces;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        piece = _ref[_i];
        if (piece.getPos().sameAs(pos)) {
          return piece;
        }
      }
      return null;
    };

    Model.prototype.squareEmpty = function(pos) {
      return !(this.getPieceAt(pos) != null);
    };

    Model.prototype.onBoard = function(pos) {
      return pos.getRow() >= 0 && pos.getRow() < 8 && pos.getCol() >= 0 && pos.getCol() < 8;
    };

    Model.prototype.clickSquare = function(pos) {
      var piece;
      if (!(typeof gameWon !== "undefined" && gameWon !== null)) {
        if (this.pieceSelected()) {
          if (this.getSelected().validMove(pos)) {
            this.movePiece(this.getSelected(), pos);
            this.turnFinished();
            return;
          } else {
            if (pos.sameAs(this.getSelected().getPos())) {
              this.unsetSelected();
              return;
            } else {
              this.unsetSelected();
            }
          }
        }
        piece = this.getPieceAt(pos);
        if (piece != null) {
          if (piece.player === this.currentPlayer) {
            this.setSelected(piece);
          }
        }
      }
    };

    Model.prototype.turnFinished = function() {
      if (this.currentPlayer === "white") {
        this.currentPlayer = "black";
      } else {
        this.currentPlayer = "white";
      }
      if (this.isChecked("white")) {
        if (this.getKing("white").getValidMoves().length === 0) {
          this.gameWon = "white";
        }
      }
      if (this.isChecked("black")) {
        if (this.getKing("black").getValidMoves().length === 0) {
          this.gameWon = "black";
        }
      }
      return this.modelChanged();
    };

    Model.prototype.movePieceTemporarily = function(piece, pos) {
      var castled, king, kingEndPos, oldPos, pieceClicked, pieceUndoes, removedPiece, rookEndPos;
      pieceUndoes = [];
      castled = false;
      if (piece.getType() === "king") {
        if (piece.getHasMoved() === false) {
          pieceClicked = this.getPieceAt(pos);
          if (pieceClicked != null) {
            if (pieceClicked.getType() === "rook" && piece.getPlayer() === pieceClicked.getPlayer() && pieceClicked.getHasMoved() === false) {
              if (piece.getPlayer() === "white") {
                rookEndPos = new Pos(0, 5);
                kingEndPos = new Pos(0, 6);
              } else {
                rookEndPos = new Pos(7, 2);
                kingEndPos = new Pos(7, 1);
              }
              pieceUndoes.push({
                piece: pieceClicked,
                oldPos: pieceClicked.getPos()
              });
              pieceUndoes.push({
                piece: piece,
                oldPos: piece.getPos()
              });
              pieceClicked.setPos(rookEndPos);
              piece.setPos(kingEndPos);
              castled = true;
            }
          }
        }
      }
      if (piece.getType() === "rook") {
        if (piece.getHasMoved() === false) {
          pieceClicked = this.getPieceAt(pos);
          if (pieceClicked != null) {
            if (pieceClicked.getType() === "king" && piece.getPlayer() === pieceClicked.getPlayer() && pieceClicked.getHasMoved() === false) {
              king = pieceClicked;
              if (piece.getPlayer() === "white") {
                rookEndPos = new Pos(0, 5);
                kingEndPos = new Pos(0, 6);
              } else {
                rookEndPos = new Pos(7, 2);
                kingEndPos = new Pos(7, 1);
              }
              pieceUndoes.push({
                piece: pieceClicked,
                oldPos: pieceClicked.getPos()
              });
              pieceUndoes.push({
                piece: piece,
                oldPos: piece.getPos()
              });
              king.setPos(kingEndPos);
              piece.setPos(rookEndPos);
              castled = true;
            }
          }
        }
      }
      if (!castled) {
        if (this.getPieceAt(pos) != null) {
          removedPiece = this.getPieceAt(pos);
          removedPiece.remove();
        }
        oldPos = piece.getPos();
        piece.setPos(pos);
        pieceUndoes.push({
          piece: piece,
          oldPos: oldPos
        });
      }
      return {
        pieceUndoes: pieceUndoes,
        removedPiece: removedPiece
      };
    };

    Model.prototype.movePiece = function(piece, pos) {
      var moveResult, pieceUndo, _i, _len, _ref;
      this.messenger.movePiece(piece.getPos(), pos);
      moveResult = this.movePieceTemporarily(piece, pos);
      _ref = moveResult.pieceUndoes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pieceUndo = _ref[_i];
        pieceUndo.piece.setHasMoved(true);
      }
      this.unsetSelected();
      return this.modelChanged();
    };

    Model.prototype.pieceSelected = function() {
      return this.selected != null;
    };

    Model.prototype.unsetSelected = function() {
      this.selected = null;
      return this.modelChanged();
    };

    Model.prototype.setSelected = function(piece) {
      this.selected = piece;
      return this.modelChanged();
    };

    Model.prototype.getSelected = function() {
      if (this.pieceSelected()) {
        return this.selected;
      }
    };

    Model.prototype.addModelChangedListener = function(func) {
      return this.modelChangedListeners.push(func);
    };

    Model.prototype.modelChanged = function() {
      var listener, _i, _len, _ref;
      _ref = this.modelChangedListeners;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        listener = _ref[_i];
        listener.modelChanged();
      }
      return console.log("Model changed");
    };

    return Model;

  })();

  View = (function() {
    var Drawer;

    function View(model) {
      this.model = model;
      this.drawer = new Drawer(this.model);
      this.redraw();
      this.model.addModelChangedListener(this);
    }

    View.prototype.modelChanged = function() {
      return this.redraw();
    };

    View.prototype.redraw = function() {
      return this.drawer.draw();
    };

    Drawer = (function() {

      function Drawer(model) {
        var col, id, left, pos, row, top, _i, _j;
        this.model = model;
        for (row = _i = 0; _i <= 7; row = ++_i) {
          for (col = _j = 0; _j <= 7; col = ++_j) {
            pos = new Pos(row, col);
            top = this.screenPosition(pos).top;
            left = this.screenPosition(pos).left;
            id = row + "-" + col;
            $("#board").append("<div id='" + id + "' " + "class='square'" + "style='position: absolute;					 	top: " + top + "px; left: " + left + "px'>					 	</div>");
            $("#" + id).bind("click", {
              model: this.model,
              pos: new Pos(row, col)
            }, function(e) {
              return e.data.model.clickSquare(e.data.pos);
            });
          }
        }
      }

      Drawer.prototype.draw = function() {
        var col, left, pos, row, top, _i, _j, _k, _len, _ref;
        $(".piece").remove();
        $(".highlight").remove();
        for (row = _i = 0; _i <= 7; row = ++_i) {
          for (col = _j = 0; _j <= 7; col = ++_j) {
            if (!this.model.squareEmpty(new Pos(row, col))) {
              $("#board").append(this.getStringFor(this.model.getPieceAt(new Pos(row, col))));
            }
          }
        }
        if (this.model.pieceSelected()) {
          _ref = this.model.getSelected().getValidMoves();
          for (_k = 0, _len = _ref.length; _k < _len; _k++) {
            pos = _ref[_k];
            top = this.screenPosition(pos).top;
            left = this.screenPosition(pos).left;
            $("#board").append("<div class='highlight' style='position: absolute;			 		 	top: " + top + "px; left: " + left + "px'></div>");
          }
        }
        if (this.model.getGameWon() != null) {
          return console.log(this.model.getGameWon() + " wins!");
        } else {
          if (this.model.isChecked("white")) {
            console.log("White is in check");
          }
          if (this.model.isChecked("black")) {
            return console.log("Black is in check");
          }
        }
      };

      Drawer.prototype.getStringFor = function(piece) {
        var left, top;
        top = this.screenPosition(piece.getPos()).top;
        left = this.screenPosition(piece.getPos()).left;
        return "<div class='" + piece.getPlayer() + piece.getType() + " piece' 				style=\"position: absolute;  background-image: url('images/" + piece.getPlayer() + piece.getType() + ".png'); 			 	top: " + top + "px; left: " + left + "px\">			 	</div>";
      };

      Drawer.prototype.screenPosition = function(pos) {
        return {
          top: pos.getRow() * 80,
          left: pos.getCol() * 80
        };
      };

      return Drawer;

    })();

    return View;

  })();

}).call(this);
